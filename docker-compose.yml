version: '3.9'
services:

  # Planets service
  planets-service:
    image: kudryashovroman/graphql-rust:planets-service
    container_name: planets-service
    restart: always
    depends_on:
      - planets-db
    environment:
      DATABASE_URL: postgres://postgres:$PLANETS_DB_PASSWORD@planets-db/planets
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: $KAFKA_TOPIC
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8001/" ]
      interval: 1m
      timeout: 3s
      start_period: 10s
      retries: 3
    ports:
      - 8001:8001
  planets-db:
    image: postgres:15.1-alpine
    container_name: planets-db
    restart: always
    environment:
      POSTGRES_DB: planets
      POSTGRES_PASSWORD: $PLANETS_DB_PASSWORD
    healthcheck:
      test: "pg_isready -U postgres -d planets"
      interval: 1m
      timeout: 5s
      start_period: 10s
      retries: 3

  # Satellites service
  satellites-service:
    image: kudryashovroman/graphql-rust:satellites-service
    container_name: satellites-service
    restart: always
    depends_on:
      - satellites-db
    environment:
      DATABASE_URL: postgres://postgres:$SATELLITES_DB_PASSWORD@satellites-db/satellites
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8002/" ]
      interval: 1m
      timeout: 3s
      start_period: 10s
      retries: 3
    ports:
      - 8002:8002
  satellites-db:
    image: postgres:15.1-alpine
    container_name: satellites-db
    restart: always
    environment:
      POSTGRES_DB: satellites
      POSTGRES_PASSWORD: $SATELLITES_DB_PASSWORD
    healthcheck:
      test: "pg_isready -U postgres -d satellites"
      interval: 1m
      timeout: 5s
      start_period: 10s
      retries: 3

  # Auth service
  auth-service:
    image: kudryashovroman/graphql-rust:auth-service
    container_name: auth-service
    restart: always
    depends_on:
      - users-db
    environment:
      DATABASE_URL: postgres://postgres:$USERS_DB_PASSWORD@users-db/users
      PASSWORD_SECRET_KEY: $PASSWORD_SECRET_KEY
      JWT_SECRET_KEY: $JWT_SECRET_KEY
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8003/" ]
      interval: 1m
      timeout: 3s
      start_period: 10s
      retries: 3
    ports:
      - 8003:8003
  users-db:
    image: postgres:15.1-alpine
    container_name: users-db
    restart: always
    environment:
      POSTGRES_DB: users
      POSTGRES_PASSWORD: $USERS_DB_PASSWORD
    healthcheck:
      test: "pg_isready -U postgres -d users"
      interval: 1m
      timeout: 5s
      start_period: 10s
      retries: 3

  gateway:
    image: kudryashovroman/graphql-rust:gateway
    container_name: gateway
    restart: always
    depends_on:
      - planets-service
      - satellites-service
      - auth-service
    environment:
      APOLLO_ROUTER_SUPERGRAPH_PATH: /gateway/schema/supergraph.graphql
      APOLLO_ROUTER_CONFIG_PATH: /gateway/config/router.yaml
      APOLLO_ROUTER_LOG: debug
      APOLLO_TELEMETRY_DISABLED: true
      JWT_SECRET_KEY: $JWT_SECRET_KEY
    volumes:
      - ./gateway/supergraph.graphql:/gateway/schema/supergraph.graphql
      - ./gateway/router.yaml:/gateway/config/router.yaml
    ports:
      - 4000:4000

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "$KAFKA_TOPIC:1:1"
    ports:
      - 9092:9092
